{
  "_args": [
    [
      "mdl-ripple@../mdl-ripple",
      "/Users/hotell/Devel/github/material-design-lite/packages/material-design-lite"
    ]
  ],
  "_from": "../../../github/material-design-lite/packages/mdl-ripple",
  "_id": "mdl-ripple@1.0.0",
  "_inCache": true,
  "_installable": true,
  "_location": "/mdl-ripple",
  "_phantomChildren": {},
  "_requested": {
    "name": "mdl-ripple",
    "raw": "mdl-ripple@../mdl-ripple",
    "rawSpec": "../mdl-ripple",
    "scope": null,
    "spec": "/Users/hotell/Devel/github/material-design-lite/packages/mdl-ripple",
    "type": "directory"
  },
  "_requiredBy": [
    "/material-design-lite",
    "/mdl-icon-toggle",
    "/mdl-radio"
  ],
  "_resolved": "file:../../../github/material-design-lite/packages/mdl-ripple",
  "_shasum": "412eaf73c6d555ce27d69988402c87eb8e3d7d01",
  "_shrinkwrap": null,
  "_spec": "mdl-ripple@../mdl-ripple",
  "_where": "/Users/hotell/Devel/github/material-design-lite/packages/material-design-lite",
  "dependencies": {
    "mdl-animation": "^1.0.0",
    "mdl-base": "^1.0.0"
  },
  "description": "Material Ink Ripple effects for web element interactions",
  "devDependencies": {},
  "license": "Apache-2.0",
  "name": "mdl-ripple",
  "optionalDependencies": {},
  "readme": "# MDL Ripple\n\n- [MDL Ripple](#mdl-ripple)\n    - [An aside regarding browser support](#an-aside-regarding-browser-support)\n  - [Installation](#installation)\n  - [Usage](#usage)\n      - [Adding the ripple Sass](#adding-the-ripple-sass)\n        - [The full Sass API](#the-full-sass-api)\n      - [Adding the ripple JS](#adding-the-ripple-js)\n        - [ES2015](#es2015)\n        - [CommonJS](#commonjs)\n        - [AMD](#amd)\n        - [Global](#global)\n    - [Unbounded Ripples](#unbounded-ripples)\n      - [Using JS](#using-js)\n      - [Using DOM (Component Only)](#using-dom-component-only)\n    - [The mdl-ripple-surface class](#the-mdl-ripple-surface-class)\n    - [Using the foundation](#using-the-foundation)\n    - [Using the vanilla DOM adapter](#using-the-vanilla-DOM-adapter)\n  - [Tips/Tricks](#tipstricks)\n    - [Integrating ripples into MDL components](#integrating-ripples-into-mdl-components)\n    - [Using a sentinel element for a ripple](#using-a-sentinel-element-for-a-ripple)\n    - [Keyboard interaction for custom UI components](#keyboard-interaction-for-custom-ui-components)\n    - [Specifying known element dimensions](#specifying-known-element-dimensions)\n  - [Caveat: Safari](#caveat-safari)\n  - [Caveat: Theme Custom Variables](#caveat-theme-custom-variables)\n\nMDL Ripple provides the Javascript and CSS required\nto provide components (or any element at all) with a\nmaterial \"ink ripple\" interaction effect. It is designed to be efficient, un-invasive, and usable\nwithout adding any extra DOM to your elements.\n\n### An aside regarding browser support\n\nIn order to function correctly, MDL Ripple requires a _browser_ implementation of [CSS Variables](https://www.w3.org/TR/css-variables/). MDL Ripple uses custom properties to dynamically position pseudo elements, which allows us to not need any extra DOM for this effect.\n\nBecause we rely on scoped, dynamic CSS variables, static pre-processors such as [postcss-custom-properties](https://github.com/postcss/postcss-custom-properties) will not work as an adequate polyfill ([...yet?](https://github.com/postcss/postcss-custom-properties/issues/32)).\n\n[Most modern browsers](http://caniuse.com/#feat=css-variables) support CSS variables, so MDL ripple will work just fine. In other cases, MDL ripple will _still work_ if you include it in your codebase. It will simply check if CSS variables are supported upon initialization and if they aren't, gracefully exit. The only exception to this rule is Safari, which does support CSS variables\nbut unfortunately ripples are disabled for (see [below](#caveat-safari) for an explanation).\n\nGiven this, it is important that you _provide gracefully degraded interaction states_ for browsers in which the ripple is not supported. We do this for all of our components.\n\n\n## Installation\n\n> NOTE: Installation via npm will be available after our alpha release.\n\n## Usage\n\nFor many components, providing a ripple interaction is straightforward.\n\nLet's say we have a `surface` element that represents a basic surface.\n\n```html\n<div class=\"surface\" tabindex=\"0\">\n  <p>A surface</p>\n</div>\n```\n\nWe also have some basic styles for our surface that\nuse [mdl-elevation](https://github.com/google/material-design-lite/tree/master/packages/mdl-elevation) to raise it up off of its background.\n\n```scss\n@import \"mdl-elevation/mixins\";\n\n.surface {\n  @include mdl-elevation(2);\n\n  position: relative;\n  border-radius: 2px;\n  text-align: center;\n  /* Indicate to user element is interactive. */\n  cursor: pointer;\n\n\n  /* Use the surface's ::before pseudo-element as a basic interaction indicator */\n\n  &::before {\n    position: absolute;\n    top: 0;\n    right: 0;\n    bottom: 0;\n    left: 0;\n    pointer-events: none;\n    background-color: black;\n    transition: opacity 110ms ease;\n    will-change: opacity;\n  }\n\n  &:active::before {\n    opacity: .18;\n  }\n\n  &:focus::before {\n    opacity: .06;\n  }\n}\n```\n\n#### Adding the ripple Sass\n\nWhen a ripple is successfully initialized on an element, it dynamically adds a `mdl-ripple` class to that element. Therefore, to add a ripple to our surface, first we include the proper Sass mixins within our surface's styles when it contains this class. We also add a few additional properties that ensure the ripple's UX is correct.\n\n```scss\n@import \"mdl-elevation/mixins\";\n@import \"mdl-ripple/mixins\";\n\n.surface.mdl-ripple {\n  @include mdl-ripple-base;\n  @include mdl-ripple-bg((pseudo: \"::before\"));\n  @include mdl-ripple-fg((pseudo: \"::after\"));\n  // ...\n\n  /* \"Bound\" the ripple, preventing the pseudo-elements from bleeding out of the box. */\n  overflow: hidden;\n}\n```\n\nThis code sets up `.surface` with the correct css variables as well as `will-change` properties to support the ripple. It then dynamically generates the correct selectors such that the surface's `::before` element functions as a background ripple, and the surface's `::after` element functions as a foreground ripple.\n\n##### The full Sass API\n\nBoth `mdl-ripple-bg` and `mdl-ripple-fg` take an `$config` map as an optional\nargument, with which you can specify the following parameters:\n\n| Parameter | Description | Default |\n| --- | --- | --- |\n| `pseudo` | The name of the pseudo-element you want to use to style the ripple. Using pseudo-elements to style ripples obviates the need for any extra DOM and is recommended. However,\nif given `null` it will style the element directly, rather than attaching styles to the pseudo element. | `null` |\n| `radius` | For _bounded_ ripples, specifies radii of the ripple circles. Can be any valid numeric CSS unit. | `100%` |\n| `theme-style` | When provided, will use a style specified by `mdl-theme` to provide colors to the ripple. For example, passing `(theme-style: primary)` would make the ripples the color of the theme's primary color. Note that there are some current limitations here. See [below](#caveat-theme-custom-variables) | `null` |\n| `base-color` | The RGB color (_without_ an alpha component) of the ripple. This will only be used if `theme-style` isn't specified. | `black` |\n| `opacity` | A unitless number from `0-1` specifying the opacity that either the `base-color` or the `theme-style` color will take on. | `.06` |\n\n#### Adding the ripple JS\n\nFirst import the ripple JS\n\n##### ES2015\n\n```javascript\nimport MDLRipple, {MDLRippleFoundation} from 'mdl-ripple';\n```\n\n##### CommonJS\n\n```javascript\nconst MDLRipple = require('mdl-ripple').default;\nconst MDLRippleFoundation = require('mdl-ripple').MDLRippleFoundation;\n```\n\n##### AMD\n\n```javascript\nrequire('path/to/mdl-ripple', function(mdlRipple) {\n  const MDLRipple = mdlRipple.default;\n  const MDLRippleFoundation = mdlRipple.MDLRippleFoundation;\n});\n```\n\n##### Global\n\n```javascript\nconst MDLRipple = global.mdl.Ripple.default;\nconst MDLRippleFoundation = global.mdl.Ripple.MDLRippleFoundation;\n```\n\nThen, simply attach initialize the ripple with the correct DOM.\n\n```javascript\nconst surface = document.querySelector('.surface');\nconst ripple = new MDLRipple(surface);\n```\n\nYou can also use `attachTo()` as an alias if you don't care about retaining a reference to the\nripple.\n\n```javascript\nMDLRipple.attachTo(document.querySelector('.surface'));\n```\n\n### Unbounded Ripples\n\nIf you'd like to use _unbounded_ ripples, such as those used for checkboxes and radio buttons\n(_TK_), you can do so either imperatively in JS _or_ declaratively using the DOM.\n\n#### Using JS\n\nYou can set an `unbounded` property to specify whether or not the ripple is unbounded.\n\n```javascript\nconst ripple = new MDLRipple(root);\nripple.unbounded = true;\n```\n\nIf directly using our foundation, you must provide this information directly anyway, so simply have\n`isUnbounded` return `true`.\n\n```javascript\nconst foundation = new MDLRippleFoundation({\n  isUnbounded: () => true,\n  // ...\n});\n```\n\n#### Using DOM (Component Only)\n\nIf you are using our vanilla component for the ripple (not our foundation class), you can add a\ndata attribute to your root element indicating that you wish the ripple to be unbounded:\n\n```html\n<div class=\"surface\" data-mdl-ripple-is-unbounded>\n  <p>A surface</p>\n</div>\n```\n\n### The mdl-ripple-surface class\n\nmdl-ripple contains CSS which exports an `mdl-ripple-surface` class that can turn any element into\na ripple:\n\n```html\n<style>\n.my-surface {\n  width: 200px;\n  height: 200px;\n  background: grey; /* Google Blue 500 :) */\n  border-radius: 2px;\n}\n</style>\n<!-- ... -->\n<div class=\"mdl-ripple-surface my-surface\" tabindex=\"0\">Ripples FTW!</div>\n```\n\nThere are also modifier classes that can be used for styling ripple surfaces using the configured\ntheme's primary and accent colors\n\n```html\n<div class=\"mdl-ripple-surface mdl-ripple-surface--primary my-surface\" tabindex=\"0\">\n  Surface with a primary-colored ripple.\n</div>\n<div class=\"mdl-ripple-surface mdl-ripple-surface--accent my-surface\" tabindex=\"0\">\n  Surface with an accent-colored ripple.\n</div>\n```\n\nCheck out our demo (in the top-level `demos/` directory) to see these classes in action.\n\n### Using the foundation\n\nThe MDLRippleFoundation can be used like any other foundation component. Usually, you'll want to use\nit in your component _along_ with the foundation for the actual UI element you're trying to add a\nripple to. The adapter API is as follows:\n\n| Method Signature | Description |\n| --- | --- |\n| `browserSupportsCssVars() => boolean` | Whether or not the given browser supports CSS Variables. When implementing this, please take the [Safari considerations](#caveat-safari) into account. We provide a `supportsCssVariables` function within the `util.js` which we recommend using, as it handles this for you. |\n| `isUnbounded() => boolean` | Whether or not the ripple should be considered unbounded. |\n| `isSurfaceActive() => boolean` | Whether or not the surface the ripple is acting upon is [active](https://www.w3.org/TR/css3-selectors/#useraction-pseudos). We use this to detect whether or not a keyboard event has activated the surface the ripple is on. This does not need to make use of `:active` (which is what we do); feel free to supply your own heuristics for it. |\n| `addClass(className: string) => void` | Adds a class to the ripple surface |\n| `removeClass(className: string) => void` | Removes a class from the ripple surface |\n| `registerInteractionHandler(evtType: string, handler: EventListener) => void` | Registers an event handler that's invoked when the ripple is interacted with using type `evtType`. Essentially equivalent to `HTMLElement.prototype.addEventListener`. |\n| `deregisterInteractionHandler(evtType: string, handler: EventListener) => void` | Unregisters an event handler that's invoked when the ripple is interacted with using type `evtType`. Essentially equivalent to `HTMLElement.prototype.removeEventListener`. |\n| `registerResizeHandler(handler: Function) => void` | Registers a handler to be called when the surface (or its viewport) resizes. Our default implementation adds the handler as a listener to the window's `resize()` event. |\n| `deregisterResizeHandler(handler: Function) => void` | Unregisters a handler to be called when the surface (or its viewport) resizes. Our default implementation removes the handler as a listener to the window's `resize()` event. |\n| `updateCssVariable(varName: string, value: (string or null)) => void` | Programmatically sets the css variable `varName` on the surface to the value specified. |\n| `computeBoundingRect() => ClientRect` | Returns the ClientRect for the surface. |\n| `getWindowPageOffset() => {x: number, y: number}` | Returns the `page{X,Y}Offset` values for the window object as `x` and `y` properties of an object (respectively). |\n\n### Using the vanilla DOM adapter\n\nBecause ripples are used so ubiquitously throughout our codebase, `MDLRipple` has a static\n`createAdapter(instance)` method that can be used to instantiate an adapter object that can be used by\nany `MDLComponent` that needs to instantiate an `MDLRippleFoundation` with custom functionality.\n\n```js\nclass MyMDLComponent extends MDLComponent {\n  constructor() {\n    super(...arguments);\n    this.ripple_ = new MDLRippleFoundation(Object.assign(MDLRipple.createAdapter(this), {\n      isSurfaceActive: () => this.isActive_\n    }));\n    this.ripple_.init();\n  }\n\n  // ...\n}\n```\n\n## Tips/Tricks\n\n### Integrating ripples into MDL components\n\nUsually, you'll want to leverage `::before` and `::after` pseudo-elements when integrating the\nripple into MDL components. Furthermore, when defining your component, you can instantiate the\nripple foundation at the top level, and share logic between those adapters.\n\n### Using a sentinel element for a ripple\n\nIf you find you can't use pseudo-elements to style the ripple, another strategy could be to use a\nsentinel element that goes inside your element and covers its surface. Doing this should get you\nthe same effect.\n\n```html\n<div class=\"my-component\">\n  <div class=\"mdl-ripple-surface\"></div>\n  <!-- your component DOM -->\n</div>\n```\n\n### Keyboard interaction for custom UI components\n\nDifferent keyboard events activate different elements. For example, the space key activate buttons, while the enter key activates links. Handling this by sniffing the key/keyCode of an event is brittle and error-prone, so instead we take the approach of using `adapter.isSurfaceActive()`. The\nway in which our default vanilla DOM adapter determines this is by using\n`element.matches(':active')`. However, this approach will _not_ work for custom components that\nthe browser does not apply this pseudo-class to.\n\nIf you want your component to work properly with keyboard events, you'll have to listen for both `keydown` and `keyup` and set some sort of state that the adapter can use to determine whether or\nnot the surface is \"active\", e.g.\n\n```js\nclass MyComponent {\n  constructor(el) {\n    this.el = el;\n    this.active = false;\n    this.ripple_ = new MDLRippleFoundation({\n      // ...\n      isSurfaceActive: () => this.active\n    });\n    this.el.addEventListener('keydown', evt => {\n      if (isSpace(evt)) {\n        this.active = true;\n      }\n    });\n    this.el.addEventListener('keyup', evt => {\n      if (isSpace(evt)) {\n        this.active = false;\n      }\n    });\n  }\n}\n```\n\n### Specifying known element dimensions\n\nIf you asynchronously load style resources, such as loading stylesheets dynamically via scripts\nor loading fonts, then `adapter.getClientRect()` may by default return _incorrect_ dimensions when\nthe ripple foundation is initialized. For example, if you put a ripple on an element that uses an\nicon font, and the size of the icon font isn't specified at initialization time, then if that icon\nfont hasn't loaded it may report the intrinsic width/height incorrectly. In order to prevent this,\nyou can override the default behavior of `getClientRect()` to return the correct results. For\nexample, if you know an icon font sizes its elements to `24px` width/height, you can do the\nfollowing:\n\n```js\nthis.ripple_ = new MDLRippleFoundation({\n  // ...\n  computeBoundingRect: () => {\n    const {left, top} = element.getBoundingClientRect();\n    const dim = 24;\n    return {\n      left,\n      top,\n      width: dim,\n      height: dim,\n      right: left + dim,\n      bottom: top + dim\n    };\n  }\n});\n```\n\n## Caveat: Safari\n\n> TL;DR ripples are disabled in Safari < 10 because of a nasty CSS variables bug.\n\nThe ripple works by updating CSS Variables which are used by pseudo-elements. This allows ripple\neffects to work on elements without the need to add a bunch of extra DOM to them. Unfortunately, in\nSafari 9.1, there is a nasty bug where updating a css variable on an element will _not_ trigger a\nstyle recalculation on that element's pseudo-elements which make use of the css variable (try out\n[this codepen](http://codepen.io/traviskaufman/pen/jARYOR) in Chrome, and then in Safari <= 9.1 to\nsee the issue). We feature-detect around this using alternative heuristics regarding different\nwebkit versions: Webkit builds which have this bug fixed (e.g. the builds used in Safari 10+)\nsupport [CSS 4 Hex Notation](https://drafts.csswg.org/css-color/#hex-notation) while those do not\nhave the fix don't. We use this to reliably feature-detect whether we are working with a WebKit\nbuild that can handle our usage of CSS variables.\n\n## Caveat: Theme Custom Variables\n\n> TL;DR theme custom variable changes will not propagate to ripples if the browser does not support\n> [CSS 4 color-mod functions](https://drafts.csswg.org/css-color/).\n\nThe way that [mdl-theme works](https://github.com/google/material-design-lite/tree/master/packages/mdl-theme#mdl-theme-prop-mixin) is that it emits two properties: one with the hard-coded sass variable, and another for a\nCSS variable that can be interpolated. The problem is that ripple backgrounds need to have an opacity, and currently there's no way to opacify a pre-existing color defined by a CSS variable.\nThere is an editor's draft for a `color-mod` function (see link in TL;DR) that _can_ do this:\n\n```css\nbackground: color(var(--mdl-theme-primary) a(6%));\n```\n\nBut as far as we know, no browsers yet support it. We have added a `@supports` clause into our code\nto make sure that it can be used as soon as browsers adopt it, but for now this means that _changes\nto your theme via a custom variable will not propagate to ripples._ We don't see this being a gigantic issue as we envision most users configuring one theme via sass. For places where you do need this, special treatment will have to be given.\n",
  "readmeFilename": "README.md",
  "version": "1.0.0"
}
