{
  "_args": [
    [
      "mdl-drawer@../mdl-drawer",
      "/Users/hotell/Devel/github/material-design-lite/packages/material-design-lite"
    ]
  ],
  "_from": "../../../github/material-design-lite/packages/mdl-drawer",
  "_id": "mdl-drawer@1.0.0",
  "_inCache": true,
  "_installable": true,
  "_location": "/mdl-drawer",
  "_phantomChildren": {},
  "_requested": {
    "name": "mdl-drawer",
    "raw": "mdl-drawer@../mdl-drawer",
    "rawSpec": "../mdl-drawer",
    "scope": null,
    "spec": "/Users/hotell/Devel/github/material-design-lite/packages/mdl-drawer",
    "type": "directory"
  },
  "_requiredBy": [
    "/material-design-lite"
  ],
  "_resolved": "file:../../../github/material-design-lite/packages/mdl-drawer",
  "_shasum": "17e54f8e5c1e35af813092abb35dfbf767500f12",
  "_shrinkwrap": null,
  "_spec": "mdl-drawer@../mdl-drawer",
  "_where": "/Users/hotell/Devel/github/material-design-lite/packages/material-design-lite",
  "dependencies": {
    "mdl-animation": "^1.0.0",
    "mdl-base": "^1.0.0",
    "mdl-elevation": "^1.0.0",
    "mdl-theme": "^1.0.0",
    "mdl-typography": "^1.0.0"
  },
  "description": "The Material Design Lite drawer component",
  "devDependencies": {},
  "license": "Apache-2.0",
  "name": "mdl-drawer",
  "optionalDependencies": {},
  "readme": "# MDL Drawer\n\nThe MDL Drawer component is a spec-aligned drawer component adhering to the\n[Material Design navigation drawer pattern](https://material.google.com/patterns/navigation-drawer.html).\nIt implements permanent and temporary drawers. Permanent drawers are CSS-only and require no JavaScript, whereas\ntemporary drawers require JavaScript to function, in order to respond to user interaction.\n\n## Installation\n\n> Note: Installation via the npm registry will be available after alpha.\n\n\n## Permanent drawer usage\n\nA permanent drawer is always open, sitting to the side of the content. It is appropriate for any display size larger\nthan mobile.\n\n> TODO(sgomes): Give advice on how to hide permanent drawer in mobile.\n\n```html\n<nav class=\"mdl-permanent-drawer mdl-typography\">\n  <div class=\"mdl-permanent-drawer__toolbar-spacer\"></div>\n  <div class=\"mdl-permanent-drawer__content\">\n    <nav id=\"icon-with-text-demo\" class=\"mdl-list\">\n      <a class=\"mdl-list-item mdl-permanent-drawer--selected\" href=\"#\">\n        <i class=\"material-icons mdl-list-item__start-detail\" aria-hidden=\"true\">inbox</i>Inbox\n      </a>\n      <a class=\"mdl-list-item\" href=\"#\">\n        <i class=\"material-icons mdl-list-item__start-detail\" aria-hidden=\"true\">star</i>Star\n      </a>\n    </nav>\n  </div>\n</nav>\n<div>\n  Toolbar and page content go inside here.\n</div>\n```\n\nIn the example above, we've set the drawer above the toolbar, and are using a toolbar spacer to ensure that it is\npresented correctly, with the correct amount of space to match the toolbar height. Note that you can place content\ninside the toolbar spacer.\n\nPermanent drawers can also be set below the toolbar:\n\n```html\n<div>Toolbar goes here</div>\n\n<div class=\"content\">\n  <nav class=\"mdl-permanent-drawer mdl-typography\">\n    <nav id=\"icon-with-text-demo\" class=\"mdl-list\">\n      <a class=\"mdl-list-item mdl-permanent-drawer--selected\" href=\"#\">\n        <i class=\"material-icons mdl-list-item__start-detail\" aria-hidden=\"true\">inbox</i>Inbox\n      </a>\n      <a class=\"mdl-list-item\" href=\"#\">\n        <i class=\"material-icons mdl-list-item__start-detail\" aria-hidden=\"true\">star</i>Star\n      </a>\n    </nav>\n  <main>\n    Page content goes here.\n  </main>\n</div>\n```\n\nCSS classes:\n\n| Class                                  | Description                                                                |\n| -------------------------------------- | -------------------------------------------------------------------------- |\n| `mdl-permanent-drawer`                 | Mandatory. Needs to be set on the root element of the component.           |\n| `mdl-permanent-drawer__content`        | Mandatory. Needs to be set on the container node for the drawer content.   |\n| `mdl-permanent-drawer__toolbar-spacer` | Optional. Add to node to provide the matching amount of space for toolbar. |\n\n\n## Temporary drawer usage\n\nA temporary drawer is usually closed, sliding out at a higher elevation than the content when opened. It is appropriate\nfor any display size.\n\n```html\n<aside class=\"mdl-temporary-drawer mdl-typography\">\n  <nav class=\"mdl-temporary-drawer__drawer\">\n    <header class=\"mdl-temporary-drawer__header\">\n      <div class=\"mdl-temporary-drawer__header-content\">\n        Header here\n      </div>\n    </header>\n    <nav id=\"icon-with-text-demo\" class=\"mdl-list\">\n      <a class=\"mdl-list-item mdl-temporary-drawer--selected\" href=\"#\">\n        <i class=\"material-icons mdl-list-item__start-detail\" aria-hidden=\"true\">inbox</i>Inbox\n      </a>\n      <a class=\"mdl-list-item\" href=\"#\">\n        <i class=\"material-icons mdl-list-item__start-detail\" aria-hidden=\"true\">star</i>Star\n      </a>\n      </a>\n    </nav>\n  </nav>\n</aside>\n```\n\n```js\nlet drawer = new mdl.TemporaryDrawer(document.querySelector('.mdl-temporary-drawer'));\ndocument.querySelector('.menu').addEventListener('click', () => drawer.open = true);\n```\n\n### Headers and toolbar spacers\n\nTemporary drawers can use toolbar spacers, headers, or neither.\n\nA toolbar spacer adds to the drawer the same amount of space that the toolbar takes up in your application. This is\nvery useful for visual alignment and consistency. Note that you can place content inside the toolbar spacer.\n\n```html\n<aside class=\"mdl-temporary-drawer mdl-typography\">\n  <nav class=\"mdl-temporary-drawer__drawer\">\n\n    <div class=\"mdl-temporary-drawer__toolbar-spacer\"></div>\n\n    <nav id=\"icon-with-text-demo\" class=\"mdl-list\">\n      <a class=\"mdl-list-item mdl-temporary-drawer--selected\" href=\"#\">\n        <i class=\"material-icons mdl-list-item__start-detail\" aria-hidden=\"true\">inbox</i>Inbox\n      </a>\n      <a class=\"mdl-list-item\" href=\"#\">\n        <i class=\"material-icons mdl-list-item__start-detail\" aria-hidden=\"true\">star</i>Star\n      </a>\n      </a>\n    </nav>\n  </nav>\n</aside>\n```\n\nA header, on the other hand, is a large rectangular area that maintains a 16:9 ratio. It's often used for user account\nselection.\nIt uses an outer `mdl-temporary-drawer__header` for positioning, with an inner `mdl-temporary-drawer__header-content`\nfor placing the actual content, which will be bottom-aligned.\n\n```html\n<aside class=\"mdl-temporary-drawer mdl-typography\">\n  <nav class=\"mdl-temporary-drawer__drawer\">\n\n    <header class=\"mdl-temporary-drawer__header\">\n      <div class=\"mdl-temporary-drawer__header-content\">\n        Header content goes here\n      </div>\n    </header>\n\n    <nav id=\"icon-with-text-demo\" class=\"mdl-list\">\n      <a class=\"mdl-list-item mdl-temporary-drawer--selected\" href=\"#\">\n        <i class=\"material-icons mdl-list-item__start-detail\" aria-hidden=\"true\">inbox</i>Inbox\n      </a>\n      <a class=\"mdl-list-item\" href=\"#\">\n        <i class=\"material-icons mdl-list-item__start-detail\" aria-hidden=\"true\">star</i>Star\n      </a>\n      </a>\n    </nav>\n  </nav>\n</aside>\n```\n\nCSS classes:\n\n| Class                                  | Description                                                                |\n| -------------------------------------- | -------------------------------------------------------------------------- |\n| `mdl-temporary-drawer`                 | Mandatory. Needs to be set on the root element of the component.           |\n| `mdl-temporary-drawer__drawer`         | Mandatory. Needs to be set on the container node for the drawer content.   |\n| `mdl-temporary-drawer__toolbar-spacer` | Optional. Add to node to provide the matching amount of space for toolbar. |\n| `mdl-temporary-drawer__header`         | Optional. Add to container node to create a 16:9 drawer header.            |\n| `mdl-temporary-drawer__header-content` | Optional. Add to content node inside `mdl-temporary-drawer__header`.       |\n\n### Using the JS Component\n\nMDL Temporary Drawer ships with a Component / Foundation combo which allows for frameworks to richly integrate the\ncorrect drawer behaviors into idiomatic components.\n\n#### Including in code\n\n##### ES2015\n\n```javascript\nimport {MDLTemporaryDrawer, MDLTemporaryDrawerFoundation} from 'mdl-drawer';\n```\n\n##### CommonJS\n\n```javascript\nconst mdlDrawer = require('mdl-drawer');\nconst MDLTemporaryDrawer = mdlDrawer.MDLTemporaryDrawer;\nconst MDLTemporaryDrawerFoundation = mdlDrawer.MDLTemporaryDrawerFoundation;\n```\n\n##### AMD\n\n```javascript\nrequire(['path/to/mdl-drawer'], mdlDrawer => {\n  const MDLTemporaryDrawer = mdlDrawer.MDLTemporaryDrawer;\n  const MDLTemporaryDrawerFoundation = mdlDrawer.MDLTemporaryDrawerFoundation;\n});\n```\n\n##### Global\n\n```javascript\nconst MDLTemporaryDrawer = mdl.Drawer.MDLTemporaryDrawer;\nconst MDLTemporaryDrawerFoundation = mdl.Drawer.MDLTemporaryDrawerFoundation;\n```\n\n#### Fully-automatic: DOM Rendering + Initialization\n\n```javascript\nconst root = MDLTemporaryDrawer.buildDom();\nconst drawer = MDLTemporaryDrawer.attachTo(root);\n// append root to element, etc...\n```\n\nYou can use `MDLTemporaryDrawer.buildDom` to dynamically construct the temporary DOM for you.\n\n#### Using an existing element.\n\nIf you do not care about retaining the component instance for the temporary drawer, simply call `attachTo()`\nand pass it a DOM element.  \n\n```javascript\nmdl.TemporaryDrawer.attachTo(document.querySelector('.mdl-temporary-drawer'));\n```\n\n#### Manual Instantiation\n\nTemporary drawers can easily be initialized using their default constructors as well, similar to `attachTo`.\n\n```javascript\nimport MDLTemporaryDrawer from 'mdl-temporary-drawer';\n\nconst drawer = new MDLTemporaryDrawer(document.querySelector('.mdl-temporary-drawer'));\n```\n\n### Using the Foundation Class\n\nMDL Temporary Drawer ships with an `MDLTemporaryDrawerFoundation` class that external frameworks and libraries can\nuse to integrate the component. As with all foundation classes, an adapter object must be provided.\nThe adapter for temporary drawers must provide the following functions, with correct signatures:\n\n| Method Signature | Description |\n| --- | --- |\n| `addClass(className: string) => void` | Adds a class to the root element. |\n| `removeClass(className: string) => void` | Removes a class from the root element. |\n| `hasClass(className: string) => boolean` | Returns boolean indicating whether element has a given class. |\n| `hasNecessaryDom() => boolean` | Returns boolean indicating whether the necessary DOM is present (namely, the `mdl-temporary-drawer__drawer` drawer container). |\n| `registerInteractionHandler(evt: string, handler: EventListener) => void` | Adds an event listener to the root element, for the specified event name. |\n| `deregisterInteractionHandler(evt: string, handler: EventListener) => void` | Removes an event listener from the root element, for the specified event name. |\n| `registerDrawerInteractionHandler(evt: string, handler: EventListener) => void` | Adds an event listener to the drawer container sub-element, for the specified event name. |\n| `deregisterDrawerInteractionHandler(evt: string, handler: EventListener) => void` | Removes an event listener from drawer container sub-element, for the specified event name. |\n| `registerTransitionEndHandler(handler: EventListener) => void` | Registers an event handler to be called when a `transitionend` event is triggered on the drawer container sub-element element. |\n| `deregisterTransitionEndHandler(handler: EventListener) => void` | Deregisters an event handler from a `transitionend` event listener. This will only be called with handlers that have previously been passed to `registerTransitionEndHandler` calls. |\n| `getDrawerWidth() => number` | Returns the current drawer width, in pixels. |\n| `setTranslateX(value: number) => void` | Sets the current position for the drawer, in pixels from the border. |\n| `updateCssVariable(value: string) => void` | Sets a CSS custom property, for controlling the current background opacity when manually dragging the drawer. |\n| `getFocusableElements() => NodeList` | Returns the node list of focusable elements inside the drawer. |\n| `saveElementTabState(el: Element) => void` | Saves the current tab index for the element in a data property. |\n| `restoreElementTabState(el: Element) => void` | Restores the saved tab index (if any) for an element. |\n| `makeElementUntabbable(el: Element) => void` | Makes an element untabbable. |\n| `isRtl() => boolean` | Returns boolean indicating whether the current environment is RTL. |\n",
  "readmeFilename": "README.md",
  "version": "1.0.0"
}
